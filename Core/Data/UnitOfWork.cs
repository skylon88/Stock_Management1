using System;
using System.Data.Entity;
using System.Threading.Tasks;

namespace Core.Data
{
    public class UnitOfWork : IUnitOfWork
    {
        /// <summary>
        /// Is instance already disposed
        /// </summary>
        /// <remarks>
        /// Default value of bool is false
        /// </remarks>
        /// <autogeneratedoc />
        private bool _disposed;
        public DbContext DatabaseContext { get; }

        public UnitOfWork(StockContext context)
        {
            DatabaseContext = context;
        }

        public void Commit()
        {
            // Save changes with the default options
            DatabaseContext.SaveChanges();
        }

        public async Task CommitAsync()
        {
            await DatabaseContext.SaveChangesAsync();
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        /// <summary>
        /// Releases unmanaged and - optionally - managed resources.
        /// </summary>
        /// <param name="disposning"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        /// <autogeneratedoc />
        protected virtual void Dispose(bool disposning)
        {
            if (_disposed)
                return;


            if (disposning)
            {
                DatabaseContext.Dispose();
            }


            _disposed = true;
        }

        /// <summary>
        /// Finalizes an instance of the <see cref="UnitOfWork"/> class.
        /// </summary>
        /// <autogeneratedoc />
        ~UnitOfWork()
        {
            Dispose(false);
        }
    }
}
